#!/usr/bin/env python3

import argparse
import contextlib
import datetime
import json
import logging
import os
import shutil
import subprocess
import sys
import tempfile
import time


APPLICATION_SUPPORT_DIRECTORY = os.path.expanduser("~/Library/Application Support/Signal")


verbose = '--verbose' in sys.argv[1:] or '-v' in sys.argv[1:]
logging.basicConfig(level=logging.DEBUG if verbose else logging.INFO, format="[%(levelname)s] %(message)s")


@contextlib.contextmanager
def chdir(path):
    pwd = os.getcwd()
    try:
        os.chdir(path)
        yield path
    finally:
        os.chdir(pwd)


def main():
    parser = argparse.ArgumentParser()
    options = parser.parse_args()

    logging.info("Quitting Signal...")
    subprocess.check_call(["osascript", "-e", "tell application \"Signal\" to quit"])
    time.sleep(10)

    timestamp = datetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).replace(microsecond=0).isoformat().replace(":", "").replace("-", "")
    computer_name = subprocess.check_output(["scutil", "--get", "ComputerName"]).decode("utf-8").strip()
    archive_path = os.path.abspath("Signal Library Backup %s %s.tar.gz" % (computer_name, timestamp))

    with tempfile.TemporaryDirectory() as temporary_directory:
        with chdir(temporary_directory):
            library_path = os.path.join(temporary_directory, "Library")

            logging.info("Copying Application Support directory...")
            subprocess.check_call(["cp", "-R", APPLICATION_SUPPORT_DIRECTORY, library_path])

            logging.info("Extracting encryption key...")
            shutil.copy(os.path.join(library_path, "config.json"), "config.json")
            with open("config.json") as fh:
                config = json.load(fh)

            logging.info("Dumping unencrypted messages...")
            script = """
PRAGMA key = "x'%s'";

.output db.sql
.dump

.mode csv
.headers on
.output messages.csv
select * from messages order by conversationId, sent_at;
    """ % (config["key"], )
            result = subprocess.run(["sqlcipher", os.path.join(library_path, "sql/db.sqlite")],
                                    input=script.encode("utf-8"))
            result.check_returncode()

            logging.info("Creating unencrypted database...")
            with open("db.sql") as fh:
                # Drop sqlite_stat4 entries which are included in the dump.
                statements = [line for line in fh.readlines() if not line.startswith("INSERT INTO sqlite_stat4")]
                result = subprocess.run(["sqlite3", "db.sqlite"], input="\n".join(statements).encode("utf-8"))
                result.check_returncode()

            logging.info("Listing tables...")
            script = """
.mode csv
.output tables.csv
select name from sqlite_master where type='table';
"""
            result = subprocess.run(["sqlite3", "db.sqlite"],
                                    input=script.encode("utf-8"))
            result.check_returncode()

            with open("tables.csv") as fh:
                tables = [t.strip() for t in fh.readlines()]

            logging.info("Exporting tables...")
            os.makedirs("tables")
            for t in tables:
                logging.info("Exporting '%s'..." % (t, ))
                script = """
.mode json
.output tables/%s.json
select * from %s;
    """ % (t, t)
                result = subprocess.run(["sqlite3", "db.sqlite"],
                                        input=script.encode("utf-8"))
                result.check_returncode()

            logging.info("Compressing backup...")
            subprocess.check_call(["tar", "-zcf", archive_path, "."])


if __name__ == "__main__":
    main()
